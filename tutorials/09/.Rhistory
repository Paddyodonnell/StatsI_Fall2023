# Install and load packages
# Adopted from: https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them
if(!require(mvtnorm)){
install.packages("mvtnorm")
library(mvtnorm)}
if(!require(installr)) {
install.packages("installr");
require(installr)
}
updateR()
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("car"),  pkgTest)
data <- read.csv("C:/Users/paddy/OneDrive/Documents/GitHub/StatsI_Fall2023/datasets/incumbents_subset.csv")
View(data)
data$voteshare
data$difflog
model <- lm(data$voteshare ~ data$difflog, data = data)
plot(model)
hist(model)
model <- lm(data$voteshare + data$difflog, data = data)
model <- lm(data$voteshare ~ data$difflog, data = data)
View(model)
?lm
model <- lm(data$difflog ~ data$voteshare, data = data)
View(model)
plot(model)
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c("car"),  pkgTest)
data <- read.csv("C:/Users/paddy/OneDrive/Documents/GitHub/StatsI_Fall2023/datasets/incumbents_subset.csv")
View(data)
data$voteshare
data$difflog
?lm
model <- lm(data$difflog ~ data$voteshare, data = data)
View(model)
plot(model)

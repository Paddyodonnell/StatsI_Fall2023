emmip(model_int2,
brncntr ~ edu_cat,
at=list(edu_cat=c("Leaving Certificate","Advanced Certificate","Bachelor Degree","Junior Cycle","Postgraduate Degree"), brncntr=c("Born in country", "Not born in country"), imwbcnt=mean(df_na$imwbcnt)),
plotit = TRUE,
CIs = TRUE)
# Make your own visualization in ggplot
emm <- emmip(model_int2,
brncntr ~ edu_cat,
at=list(edu_cat=c("Leaving Certificate","Advanced Certificate","Bachelor Degree","Junior Cycle","Postgraduate Degree"), brncntr=c("Born in country", "Not born in country"), imwbcnt=mean(df_na$imwbcnt)),
plotit = FALSE,
CIs = TRUE)
# Build plot
plot <- ggplot(data=emm, aes(x=edu_cat, y=yvar, fill=brncntr)) +
geom_bar(stat="identity",position="dodge") +
geom_errorbar(position=position_dodge(.9),width=.25, aes(ymax=UCL, ymin=LCL),alpha=0.3) + # Add error bars
ylab("Predicted level of Euroscepticism") +
xlab("Education levels") +
labs(fill = "Regime type")
plot
read.csv("C:/Users/paddy/Downloads/hp-deprivation-index-scores-2022.csv")
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer","arm","emmeans","ggplot2"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df <- read.csv("C:/Users/paddy/Downloads/hp-deprivation-index-scores-2022.csv")
View(df)
df2 <- read.csv("C:/Users/paddy/Downloads/DataRecords electoral zones (2).csv")
View(df2)
df <- read.csv("C:/Users/paddy/Downloads/2016_electoral_zones_data.csv")
View(df)
df$COUNTY
dublin_only <- subset(df, COUNTY == Dublin)
dublin_only <- subset(df, COUNTY = Dublin 1)
dublin_only <- subset(df, COUNTY = Dublin)
type(dublin_only)
class(dublin_only)
View(dublin_only)
dublin_only <- subset(df, COUNTY == Dublin)
dublin_only <- df[df$COUNTY, "Dublin"]
View(dublin_only)
dublin_only <- subset(df, COUNTY == "Dublin")
View(dublin_only)
dublin_only$DepTxt16
str(dublin_only$DepTxt16)
View(dublin_only$DepTxt16)
str(dublin_only$DepTxt16)
value(dublin_only$DepTxt16)
?lm
lm(dublin_only, HP2016REL ~ Lone.Parent.Ratio.2016)
lm(HP2016REL ~ Lone.Parent.Ratio.2016, dublin_only)
lm1 <- lm(HP2016REL ~ Lone.Parent.Ratio.2016, dublin_only)
summary(lm1)
lm1 <- lm(HP2016REL, Lone.Parent.Ratio.2016, dublin_only)
lm1 <- lm(HP2016REL ~ Lone.Parent.Ratio.2016, dublin_only)
summary(lm1)
lm2 <- lm(Lone.Parent.Ratio.2016 ~ HP2016REL, dublin_only)
summary(lm2)
plot(lm2)
lm1 <- lm(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
lm2 <- lm(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)
summary(lm2)
plot(lm2)
abline(model1, col = 'red', lwd = 3)+
grid()+
title(main = 'Scatter Plot Voteshare Vs. Difflog', y = "voteshare", x = "difflog")
plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
}
{plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
}
{plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)+
abline(model1, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(model1, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(lm1, col = 'red', lwd = 3)+
grid()
}
{plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)+
abline(lm2, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(lm1, col = 'red', lwd = 3)+
grid()
}
{plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)+
abline(lm2, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(lm1, col = 'red', lwd = 3)+
grid()
}
{plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)+
abline(lm2, col = 'red', lwd = 3)+
grid()
}
{plot(HP2016REL ~ Lone.Parent.Ratio.2016, data = dublin_only)
abline(lm1, col = 'red', lwd = 3)+
grid()
}
{plot(Lone.Parent.Ratio.2016 ~ HP2016REL, data = dublin_only)+
abline(lm2, col = 'red', lwd = 3)+
grid()
}
limerick_only <- subset(df, COUNTY == "Limerick")
View(limerick_only)
df2 <- read.csv("C:/Users/paddy/Downloads/hp-deprivation-index-scores-2022.csv")
View(df2)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
function (x, df1, df2, ncp, log = FALSE)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("car"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load data
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
View(df)
# Convert categorical variables into factor
df$edu_cat <- factor(df$edu_cat)
df$gndr <- ifelse(df$gndr == 2, 1, 0)
df$gndr <- factor(df$gndr, labels = c("Male", "Female"))
df$brncntr <- ifelse(df$brncntr == 2, 1, 0)
df$brncntr <- factor(df$brncntr, labels = c("Born in country", "Not born in country"))
# Complete case analysis
df_na <- df[complete.cases(df), ]
# Reset index
rownames(df_na) <- 1:nrow(df_na)
# Final model
model_final <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_final)
# Get Cook's Distance for all observations
cooks_d <- cooks.distance(model_final)
cooks_d
# Plot
par(mar=c(5,4,3,3)) # Reset figure margins
View(df)
# Remove objects
rm(list=ls())
function (x, df1, df2, ncp, log = FALSE)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("car"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load data
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
View(df)
# Convert categorical variables into factor
df$edu_cat <- factor(df$edu_cat)
df$gndr <- ifelse(df$gndr == 2, 1, 0)
df$gndr <- factor(df$gndr, labels = c("Male", "Female"))
df$brncntr <- ifelse(df$brncntr == 2, 1, 0)
df$brncntr <- factor(df$brncntr, labels = c("Born in country", "Not born in country"))
# Complete case analysis
df_na <- df[complete.cases(df), ]
# Reset index
rownames(df_na) <- 1:nrow(df_na)
# Final model
model_final <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_final)
View(df)
summary(model_final)
# Get Cook's Distance for all observations
cooks_d <- cooks.distance(model_final)
cooks_d
# Plot
par(mar=c(5,4,3,3)) # Reset figure margins
plot(model_final, which=4)
# Get top 10 highest Cook's Distance values
head(sort(cooks_d, decreasing=TRUE),10)
# Calculate threshold
thres <- 4/(nobs(model_final)-(length(coef(model_final))-1)-1)
# Get observations above threshold
which(sort(cooks_d, decreasing=TRUE)>thres)
# Subsetting data frames, df[row,column]
df_na[263,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[263] # Predicted outcome
df_na[650,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[650] # Predicted outcome
df_na[871,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[871] # Predicted outcome
# Get DFBeta for all observations
dfbeta <- dfbeta(model_final)
View(dfbeta)
# Print results for some observations
dfbeta[1, c("edlvdie")]
dfbeta[2, c("edlvdie")]
sprintf("%.10f", dfbeta[2, c("edlvdie")])
# Find maximum absolute values for each coefficient
dfbeta[,c("edlvdie")][which.max(abs(dfbeta[,c("edlvdie")]))]
dfbeta[,c("hinctnta")][which.max(abs(dfbeta[,c("hinctnta")]))]
dfbeta[,c("trstplt")][which.max(abs(dfbeta[,c("trstplt")]))]
dfbeta[,c("imwbcnt")][which.max(abs(dfbeta[,c("imwbcnt")]))]
# Subsetting data frames, df[row,column]
df_na[756,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[756] # Predicted outcome
df_na[404,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[404] # Predicted outcome
df_na[344,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[344] # Predicted outcome
# Plot
plot(model_final, which=5)
# Histogram of error
hist(model_final$residuals)
# QQ (Quantile-quantile) plot
plot(model_final, which=2)
# Residual versus fitted plot
plot(model_final, which=1)
# What to do if labels of observations are overlapping?
which(model_final$residuals>6.3 & model_final$fitted.values<4.5)
# Scatter plots
plot(df_na$edlvdie,jitter(df_na$euftf_re,2))
plot(df_na$hinctnta,jitter(df_na$euftf_re,2))
plot(df_na$trstplt,jitter(df_na$euftf_re,2))
plot(df_na$imwbcnt,jitter(df_na$euftf_re,2))
plot(df_na$agea,jitter(df_na$euftf_re,2))
# Residual plot
residualPlots(model_final)
# Add a quadratic term for trust in politics
df_na$trstplt_trstplt <- df_na$trstplt^2
# Fit model
model_quad <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
trstplt_trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_quad)
# Correlation matrix
cor(df_na[, c("edlvdie","hinctnta","trstplt","imwbcnt","agea")])
# Variance Inflation Factor
vif(model_final)
# Create a variable with high correlation
cor(df_na$trstplt,df_na$imwbcnt)
df_na$trust_att <- df_na$trstplt + df_na$imwbcnt
cor(df_na$trust_att,df_na$trstplt)
cor(df_na$trust_att,df_na$imwbcnt)
# Refit model with highly correlated variables
model_collin <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
imwbcnt +
trust_att, data=df_na)
summary(model_collin)
# Remove objects
rm(list=ls())
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("car"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# Load data
df <- read.csv("../../datasets/ess_euroscepticism.csv", row.names="X")
View(df)
# Convert categorical variables into factor
df$edu_cat <- factor(df$edu_cat)
df$gndr <- ifelse(df$gndr == 2, 1, 0)
df$gndr <- factor(df$gndr, labels = c("Male", "Female"))
df$brncntr <- ifelse(df$brncntr == 2, 1, 0)
df$brncntr <- factor(df$brncntr, labels = c("Born in country", "Not born in country"))
# Complete case analysis
df_na <- df[complete.cases(df), ]
# Reset index
rownames(df_na) <- 1:nrow(df_na)
# Final model
model_final <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_final)
# Get Cook's Distance for all observations
cooks_d <- cooks.distance(model_final)
cooks_d
# Plot
par(mar=c(5,4,3,3)) # Reset figure margins
plot(model_final, which=4)
# Get top 10 highest Cook's Distance values
head(sort(cooks_d, decreasing=TRUE),10)
# Calculate threshold
thres <- 4/(nobs(model_final)-(length(coef(model_final))-1)-1)
# Get observations above threshold
which(sort(cooks_d, decreasing=TRUE)>thres)
# Subsetting data frames, df[row,column]
df_na[263,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[263] # Predicted outcome
df_na[650,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[650] # Predicted outcome
df_na[871,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[871] # Predicted outcome
# Get DFBeta for all observations
dfbeta <- dfbeta(model_final)
View(dfbeta)
# Print results for some observations
dfbeta[1, c("edlvdie")]
dfbeta[2, c("edlvdie")]
sprintf("%.10f", dfbeta[2, c("edlvdie")])
# Find maximum absolute values for each coefficient
dfbeta[,c("edlvdie")][which.max(abs(dfbeta[,c("edlvdie")]))]
dfbeta[,c("hinctnta")][which.max(abs(dfbeta[,c("hinctnta")]))]
dfbeta[,c("trstplt")][which.max(abs(dfbeta[,c("trstplt")]))]
dfbeta[,c("imwbcnt")][which.max(abs(dfbeta[,c("imwbcnt")]))]
# Subsetting data frames, df[row,column]
df_na[756,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[756] # Predicted outcome
df_na[404,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[404] # Predicted outcome
df_na[344,c("euftf_re","edlvdie","hinctnta","trstplt","imwbcnt","gndr","agea","brncntr")]
model_final$fitted.values[344] # Predicted outcome
# Plot
plot(model_final, which=5)
# Histogram of error
hist(model_final$residuals)
# QQ (Quantile-quantile) plot
plot(model_final, which=2)
# Residual versus fitted plot
plot(model_final, which=1)
# What to do if labels of observations are overlapping?
which(model_final$residuals>6.3 & model_final$fitted.values<4.5)
# Scatter plots
plot(df_na$edlvdie,jitter(df_na$euftf_re,2))
plot(df_na$hinctnta,jitter(df_na$euftf_re,2))
plot(df_na$trstplt,jitter(df_na$euftf_re,2))
plot(df_na$imwbcnt,jitter(df_na$euftf_re,2))
plot(df_na$agea,jitter(df_na$euftf_re,2))
# Residual plot
residualPlots(model_final)
# Add a quadratic term for trust in politics
df_na$trstplt_trstplt <- df_na$trstplt^2
# Fit model
model_quad <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
trstplt_trstplt +
imwbcnt +
gndr +
agea +
brncntr, data=df_na)
summary(model_quad)
# Correlation matrix
cor(df_na[, c("edlvdie","hinctnta","trstplt","imwbcnt","agea")])
# Variance Inflation Factor
vif(model_final)
# Create a variable with high correlation
cor(df_na$trstplt,df_na$imwbcnt)
df_na$trust_att <- df_na$trstplt + df_na$imwbcnt
cor(df_na$trust_att,df_na$trstplt)
cor(df_na$trust_att,df_na$imwbcnt)
# Refit model with highly correlated variables
model_collin <- lm(euftf_re~edlvdie +
hinctnta +
trstplt +
imwbcnt +
trust_att, data=df_na)
summary(model_collin)
df <- read.csv("C:/Users/paddy/Downloads/2016_electoral_zones_data.csv")
View(df)
# Remove objects
rm(list=ls())
function (model, ...)
function (x, df1, df2, ncp, log = FALSE)
{
if (missing(ncp))
.Call(C_df, x, df1, df2, log)
else .Call(C_dnf, x, df1, df2, ncp, log)
}
# Detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# Load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# Load any necessary packages
lapply(c("stargazer","arm","emmeans","ggplot2"),  pkgTest)
# Set working directory for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df <- read.csv("C:/Users/paddy/Downloads/2016_electoral_zones_data.csv")
df2 <- read.csv("C:/Users/paddy/Downloads/hp-deprivation-index-scores-2022.csv")
View(df2)
df$COUNTY
dublin_only <- subset(df, COUNTY == "Dublin")
limerick_only <- subset(df, COUNTY == "Limerick")
View(dublin_only)
source("~/GitHub/StatsI_Fall2023/tutorials/11/Pobal_deprivation_index_2016_Subsets.R")
source("~/GitHub/StatsI_Fall2023/tutorials/11/Pobal_deprivation_index_2016_Subsets.R")
source("~/GitHub/StatsI_Fall2023/tutorials/11/Pobal_deprivation_index_2016_Subsets.R")
setwd("~/GitHub/StatsI_Fall2023/tutorials/11")
